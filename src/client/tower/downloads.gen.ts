// Code generated by github.com/dashotv/golem. DO NOT EDIT.
import { Download, Response, Setting, towerClient } from '.';

export interface DownloadsIndexRequest {
  page: number;
  limit: number;
}
export interface DownloadsIndexResponse extends Response {
  result: Download[];
  total: number;
}
export interface DownloadsCreateRequest {
  subject: Download;
}
export interface DownloadsCreateResponse extends Response {
  result: Download;
}
export interface DownloadsShowRequest {
  id: string;
}
export interface DownloadsShowResponse extends Response {
  result: Download;
}
export interface DownloadsUpdateRequest {
  id: string;
  subject: Download;
}
export interface DownloadsUpdateResponse extends Response {
  result: Download;
}
export interface DownloadsSettingsRequest {
  id: string;
  setting: Setting;
}
export interface DownloadsSettingsResponse extends Response {
  result: Download;
}
export interface DownloadsDeleteRequest {
  id: string;
}
export interface DownloadsDeleteResponse extends Response {
  result: Download;
}

export interface DownloadsMediumRequest {
  id: string;
}

export interface DownloadsSelectRequest {
  id: string;
}

export interface DownloadsTorrentRequest {
  id: string;
}

export const DownloadsIndex = async (params: DownloadsIndexRequest) => {
  const response = await towerClient.get(`/downloads/?page=${params.page}&limit=${params.limit}`);
  return response.data as DownloadsIndexResponse;
};
export const DownloadsCreate = async (params: DownloadsCreateRequest) => {
  const response = await towerClient.post(`/downloads/?`, params.subject);
  return response.data as DownloadsCreateResponse;
};
export const DownloadsShow = async (params: DownloadsShowRequest) => {
  const response = await towerClient.get(`/downloads/${params.id}?`);
  return response.data as DownloadsShowResponse;
};
export const DownloadsUpdate = async (params: DownloadsUpdateRequest) => {
  const response = await towerClient.put(`/downloads/${params.id}?`, params.subject);
  return response.data as DownloadsUpdateResponse;
};
export const DownloadsSettings = async (params: DownloadsSettingsRequest) => {
  const response = await towerClient.patch(`/downloads/${params.id}?`, params.setting);
  return response.data as DownloadsSettingsResponse;
};
export const DownloadsDelete = async (params: DownloadsDeleteRequest) => {
  const response = await towerClient.delete(`/downloads/${params.id}?`);
  return response.data as DownloadsDeleteResponse;
};
export const DownloadsLast = async () => {
  const response = await towerClient.get(`/downloads/last?`);
  return response.data as Response;
};
export const DownloadsMedium = async (params: DownloadsMediumRequest) => {
  const response = await towerClient.get(`/downloads/${params.id}/medium?`);
  return response.data as Response;
};
export const DownloadsRecent = async () => {
  const response = await towerClient.get(`/downloads/recent?`);
  return response.data as Response;
};
export const DownloadsSelect = async (params: DownloadsSelectRequest) => {
  const response = await towerClient.put(`/downloads/${params.id}/select?`);
  return response.data as Response;
};
export const DownloadsTorrent = async (params: DownloadsTorrentRequest) => {
  const response = await towerClient.get(`/downloads/${params.id}/torrent?`);
  return response.data as Response;
};
