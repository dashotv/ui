// Code generated by github.com/dashotv/golem. DO NOT EDIT.
import { Download, Medium, Response, Setting, towerClient } from '.';

export interface DownloadsIndexRequest {
  page: number;
  limit: number;
}
export interface DownloadsIndexResponse extends Response {
  result: Download[];
  total: number;
}
export const DownloadsIndex = async (params: DownloadsIndexRequest) => {
  const response = await towerClient.get(`/downloads/?page=${params.page}&limit=${params.limit}`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as DownloadsIndexResponse;
};

export interface DownloadsCreateRequest {
  subject: Download;
}
export interface DownloadsCreateResponse extends Response {
  result: Download;
}
export const DownloadsCreate = async (params: DownloadsCreateRequest) => {
  const response = await towerClient.post(`/downloads/?`, params.subject);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as DownloadsCreateResponse;
};

export interface DownloadsShowRequest {
  id: string;
}
export interface DownloadsShowResponse extends Response {
  result: Download;
}
export const DownloadsShow = async (params: DownloadsShowRequest) => {
  const response = await towerClient.get(`/downloads/${params.id}?`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as DownloadsShowResponse;
};

export interface DownloadsUpdateRequest {
  id: string;
  subject: Download;
}
export interface DownloadsUpdateResponse extends Response {
  result: Download;
}
export const DownloadsUpdate = async (params: DownloadsUpdateRequest) => {
  const response = await towerClient.put(`/downloads/${params.id}?`, params.subject);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as DownloadsUpdateResponse;
};

export interface DownloadsSettingsRequest {
  id: string;
  setting: Setting;
}
export interface DownloadsSettingsResponse extends Response {
  result: Download;
}
export const DownloadsSettings = async (params: DownloadsSettingsRequest) => {
  const response = await towerClient.patch(`/downloads/${params.id}?`, params.setting);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as DownloadsSettingsResponse;
};

export interface DownloadsDeleteRequest {
  id: string;
}
export interface DownloadsDeleteResponse extends Response {
  result: Download;
}
export const DownloadsDelete = async (params: DownloadsDeleteRequest) => {
  const response = await towerClient.delete(`/downloads/${params.id}?`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as DownloadsDeleteResponse;
};

export interface DownloadsLastResponse extends Response {
  result: number;
}
export const DownloadsLast = async () => {
  const response = await towerClient.get(`/downloads/last?`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as DownloadsLastResponse;
};

export interface DownloadsMediumRequest {
  id: string;
}
export interface DownloadsMediumResponse extends Response {
  result: Medium[];
}
export const DownloadsMedium = async (params: DownloadsMediumRequest) => {
  const response = await towerClient.get(`/downloads/${params.id}/medium?`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as DownloadsMediumResponse;
};

export interface DownloadsRecentRequest {
  page: number;
  medium_id: string;
}
export interface DownloadsRecentResponse extends Response {
  result: Download[];
}
export const DownloadsRecent = async (params: DownloadsRecentRequest) => {
  const response = await towerClient.get(`/downloads/recent?page=${params.page}&medium_id=${params.medium_id}`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as DownloadsRecentResponse;
};

export interface DownloadsSelectRequest {
  id: string;
  medium_id: string;
  num: number;
}

export const DownloadsSelect = async (params: DownloadsSelectRequest) => {
  const response = await towerClient.put(
    `/downloads/${params.id}/select?medium_id=${params.medium_id}&num=${params.num}`,
  );

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as Response;
};

export interface DownloadsTorrentRequest {
  id: string;
}

export const DownloadsTorrent = async (params: DownloadsTorrentRequest) => {
  const response = await towerClient.get(`/downloads/${params.id}/torrent?`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as Response;
};

export interface DownloadsClearRequest {
  id: string;
  nums: string;
}

export const DownloadsClear = async (params: DownloadsClearRequest) => {
  const response = await towerClient.put(`/downloads/${params.id}/clear?id=${params.id}&nums=${params.nums}`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as Response;
};
