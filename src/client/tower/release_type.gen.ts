// Code generated by github.com/dashotv/golem. DO NOT EDIT.
import { ReleaseType, Response, Setting, towerClient } from '.';

export interface ReleaseTypeIndexRequest {
  page: number;
  limit: number;
}
export interface ReleaseTypeIndexResponse extends Response {
  result: ReleaseType[];
  total: number;
}
export const ReleaseTypeIndex = async (params: ReleaseTypeIndexRequest) => {
  const response = await towerClient.get(`/release_type/?page=${params.page}&limit=${params.limit}`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as ReleaseTypeIndexResponse;
};

export interface ReleaseTypeCreateRequest {
  subject: ReleaseType;
}
export interface ReleaseTypeCreateResponse extends Response {
  result: ReleaseType;
}
export const ReleaseTypeCreate = async (params: ReleaseTypeCreateRequest) => {
  const response = await towerClient.post(`/release_type/?`, params.subject);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as ReleaseTypeCreateResponse;
};

export interface ReleaseTypeShowRequest {
  id: string;
}
export interface ReleaseTypeShowResponse extends Response {
  result: ReleaseType;
}
export const ReleaseTypeShow = async (params: ReleaseTypeShowRequest) => {
  const response = await towerClient.get(`/release_type/${params.id}?`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as ReleaseTypeShowResponse;
};

export interface ReleaseTypeUpdateRequest {
  id: string;
  subject: ReleaseType;
}
export interface ReleaseTypeUpdateResponse extends Response {
  result: ReleaseType;
}
export const ReleaseTypeUpdate = async (params: ReleaseTypeUpdateRequest) => {
  const response = await towerClient.put(`/release_type/${params.id}?`, params.subject);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as ReleaseTypeUpdateResponse;
};

export interface ReleaseTypeSettingsRequest {
  id: string;
  setting: Setting;
}
export interface ReleaseTypeSettingsResponse extends Response {
  result: ReleaseType;
}
export const ReleaseTypeSettings = async (params: ReleaseTypeSettingsRequest) => {
  const response = await towerClient.patch(`/release_type/${params.id}?`, params.setting);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as ReleaseTypeSettingsResponse;
};

export interface ReleaseTypeDeleteRequest {
  id: string;
}
export interface ReleaseTypeDeleteResponse extends Response {
  result: ReleaseType;
}
export const ReleaseTypeDelete = async (params: ReleaseTypeDeleteRequest) => {
  const response = await towerClient.delete(`/release_type/${params.id}?`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as ReleaseTypeDeleteResponse;
};
