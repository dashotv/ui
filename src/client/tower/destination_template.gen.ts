// Code generated by github.com/dashotv/golem. DO NOT EDIT.
import { DestinationTemplate, Response, Setting, towerClient } from '.';

export interface DestinationTemplateIndexRequest {
  page: number;
  limit: number;
}
export interface DestinationTemplateIndexResponse extends Response {
  result: DestinationTemplate[];
  total: number;
}
export const DestinationTemplateIndex = async (params: DestinationTemplateIndexRequest) => {
  const response = await towerClient.get(`/destination_template/?page=${params.page}&limit=${params.limit}`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as DestinationTemplateIndexResponse;
};

export interface DestinationTemplateCreateRequest {
  subject: DestinationTemplate;
}
export interface DestinationTemplateCreateResponse extends Response {
  result: DestinationTemplate;
}
export const DestinationTemplateCreate = async (params: DestinationTemplateCreateRequest) => {
  const response = await towerClient.post(`/destination_template/?`, params.subject);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as DestinationTemplateCreateResponse;
};

export interface DestinationTemplateShowRequest {
  id: string;
}
export interface DestinationTemplateShowResponse extends Response {
  result: DestinationTemplate;
}
export const DestinationTemplateShow = async (params: DestinationTemplateShowRequest) => {
  const response = await towerClient.get(`/destination_template/${params.id}?`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as DestinationTemplateShowResponse;
};

export interface DestinationTemplateUpdateRequest {
  id: string;
  subject: DestinationTemplate;
}
export interface DestinationTemplateUpdateResponse extends Response {
  result: DestinationTemplate;
}
export const DestinationTemplateUpdate = async (params: DestinationTemplateUpdateRequest) => {
  const response = await towerClient.put(`/destination_template/${params.id}?`, params.subject);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as DestinationTemplateUpdateResponse;
};

export interface DestinationTemplateSettingsRequest {
  id: string;
  setting: Setting;
}
export interface DestinationTemplateSettingsResponse extends Response {
  result: DestinationTemplate;
}
export const DestinationTemplateSettings = async (params: DestinationTemplateSettingsRequest) => {
  const response = await towerClient.patch(`/destination_template/${params.id}?`, params.setting);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as DestinationTemplateSettingsResponse;
};

export interface DestinationTemplateDeleteRequest {
  id: string;
}
export interface DestinationTemplateDeleteResponse extends Response {
  result: DestinationTemplate;
}
export const DestinationTemplateDelete = async (params: DestinationTemplateDeleteRequest) => {
  const response = await towerClient.delete(`/destination_template/${params.id}?`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as DestinationTemplateDeleteResponse;
};
