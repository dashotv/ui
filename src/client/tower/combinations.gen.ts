// Code generated by github.com/dashotv/golem. DO NOT EDIT.
import { Combination, CombinationChild, Response, towerClient } from '.';

export interface CombinationsIndexRequest {
  page: number;
  limit: number;
}
export interface CombinationsIndexResponse extends Response {
  result: Combination[];
  total: number;
}
export const CombinationsIndex = async (params: CombinationsIndexRequest) => {
  const response = await towerClient.get(`/combinations/?page=${params.page}&limit=${params.limit}`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as CombinationsIndexResponse;
};

export interface CombinationsShowRequest {
  name: string;
}
export interface CombinationsShowResponse extends Response {
  result: CombinationChild[];
}
export const CombinationsShow = async (params: CombinationsShowRequest) => {
  const response = await towerClient.get(`/combinations/${params.name}?`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as CombinationsShowResponse;
};

export interface CombinationsCreateRequest {
  subject: Combination;
}

export const CombinationsCreate = async (params: CombinationsCreateRequest) => {
  const response = await towerClient.post(`/combinations/?`, params.subject);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as Response;
};
