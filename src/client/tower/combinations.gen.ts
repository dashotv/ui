// Code generated by github.com/dashotv/golem. DO NOT EDIT.
import { Combination, Response, Setting, towerClient } from '.';

export interface CombinationsIndexRequest {
  page: number;
  limit: number;
}
export interface CombinationsIndexResponse extends Response {
  result: Combination[];
  total: number;
}
export interface CombinationsCreateRequest {
  subject: Combination;
}
export interface CombinationsCreateResponse extends Response {
  result: Combination;
}
export interface CombinationsShowRequest {
  id: string;
}
export interface CombinationsShowResponse extends Response {
  result: Combination;
}
export interface CombinationsUpdateRequest {
  id: string;
  subject: Combination;
}
export interface CombinationsUpdateResponse extends Response {
  result: Combination;
}
export interface CombinationsSettingsRequest {
  id: string;
  setting: Setting;
}
export interface CombinationsSettingsResponse extends Response {
  result: Combination;
}
export interface CombinationsDeleteRequest {
  id: string;
}
export interface CombinationsDeleteResponse extends Response {
  result: Combination;
}

export const CombinationsIndex = async (params: CombinationsIndexRequest) => {
  const response = await towerClient.get(`/combinations/?page=${params.page}&limit=${params.limit}`);
  return response.data as CombinationsIndexResponse;
};
export const CombinationsCreate = async (params: CombinationsCreateRequest) => {
  const response = await towerClient.post(`/combinations/?`, params.subject);
  return response.data as CombinationsCreateResponse;
};
export const CombinationsShow = async (params: CombinationsShowRequest) => {
  const response = await towerClient.get(`/combinations/${params.id}?`);
  return response.data as CombinationsShowResponse;
};
export const CombinationsUpdate = async (params: CombinationsUpdateRequest) => {
  const response = await towerClient.put(`/combinations/${params.id}?`, params.subject);
  return response.data as CombinationsUpdateResponse;
};
export const CombinationsSettings = async (params: CombinationsSettingsRequest) => {
  const response = await towerClient.patch(`/combinations/${params.id}?`, params.setting);
  return response.data as CombinationsSettingsResponse;
};
export const CombinationsDelete = async (params: CombinationsDeleteRequest) => {
  const response = await towerClient.delete(`/combinations/${params.id}?`);
  return response.data as CombinationsDeleteResponse;
};
