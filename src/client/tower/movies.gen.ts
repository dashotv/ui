// Code generated by github.com/dashotv/golem. DO NOT EDIT.
import { Movie, Response, Setting, towerClient } from '.';

export interface MoviesIndexRequest {
  page: number;
  limit: number;
}
export interface MoviesIndexResponse extends Response {
  result: Movie[];
  total: number;
}
export interface MoviesCreateRequest {
  subject: Movie;
}
export interface MoviesCreateResponse extends Response {
  result: Movie;
}
export interface MoviesShowRequest {
  id: string;
}
export interface MoviesShowResponse extends Response {
  result: Movie;
}
export interface MoviesUpdateRequest {
  id: string;
  subject: Movie;
}
export interface MoviesUpdateResponse extends Response {
  result: Movie;
}
export interface MoviesSettingsRequest {
  id: string;
  setting: Setting;
}
export interface MoviesSettingsResponse extends Response {
  result: Movie;
}
export interface MoviesDeleteRequest {
  id: string;
}
export interface MoviesDeleteResponse extends Response {
  result: Movie;
}
export interface MoviesRefreshRequest {
  id: string;
}

export interface MoviesPathsRequest {
  id: string;
}

export const MoviesIndex = async (params: MoviesIndexRequest) => {
  const response = await towerClient.get(`/movies/?page=${params.page}&limit=${params.limit}`);
  return response.data as MoviesIndexResponse;
};
export const MoviesCreate = async (params: MoviesCreateRequest) => {
  const response = await towerClient.post(`/movies/?`, params.subject);
  return response.data as MoviesCreateResponse;
};
export const MoviesShow = async (params: MoviesShowRequest) => {
  const response = await towerClient.get(`/movies/${params.id}?`);
  return response.data as MoviesShowResponse;
};
export const MoviesUpdate = async (params: MoviesUpdateRequest) => {
  const response = await towerClient.put(`/movies/${params.id}?`, params.subject);
  return response.data as MoviesUpdateResponse;
};
export const MoviesSettings = async (params: MoviesSettingsRequest) => {
  const response = await towerClient.patch(`/movies/${params.id}?`, params.setting);
  return response.data as MoviesSettingsResponse;
};
export const MoviesDelete = async (params: MoviesDeleteRequest) => {
  const response = await towerClient.delete(`/movies/${params.id}?`);
  return response.data as MoviesDeleteResponse;
};
export const MoviesRefresh = async (params: MoviesRefreshRequest) => {
  const response = await towerClient.put(`/movies/${params.id}/refresh?`);
  return response.data as Response;
};
export const MoviesPaths = async (params: MoviesPathsRequest) => {
  const response = await towerClient.get(`/movies/${params.id}/paths?`);
  return response.data as Response;
};
