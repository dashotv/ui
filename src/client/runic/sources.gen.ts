// Code generated by github.com/dashotv/golem. DO NOT EDIT.
import { Release, Response, runicClient } from '.';
import * as newznab from './newznab';
import * as reader from './reader';

export interface SourcesIndexRequest {
  page: number;
  limit: number;
}
export interface SourcesIndexResponse extends Response {
  result: reader.Source[];
  total: number;
}
export const SourcesIndex = async (params: SourcesIndexRequest) => {
  const response = await runicClient.get(`/sources/?page=${params.page}&limit=${params.limit}`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as SourcesIndexResponse;
};

export interface SourcesShowRequest {
  id: string;
}
export interface SourcesShowResponse extends Response {
  result: reader.Source;
}
export const SourcesShow = async (params: SourcesShowRequest) => {
  const response = await runicClient.get(`/sources/${params.id}?`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as SourcesShowResponse;
};

export interface SourcesReadRequest {
  id: string;
  categories: string;
}
export interface SourcesReadResponse extends Response {
  result: newznab.NZB[];
}
export const SourcesRead = async (params: SourcesReadRequest) => {
  const response = await runicClient.get(`/sources/${params.id}/read?categories=${params.categories}`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as SourcesReadResponse;
};

export interface SourcesSearchRequest {
  id: string;
  q: string;
  t: string;
}
export interface SourcesSearchResponse extends Response {
  result: newznab.NZB[];
}
export const SourcesSearch = async (params: SourcesSearchRequest) => {
  const response = await runicClient.get(`/sources/${params.id}/search?q=${params.q}&t=${params.t}`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as SourcesSearchResponse;
};

export interface SourcesParseRequest {
  id: string;
  categories: string;
}
export interface SourcesParseResponse extends Response {
  result: Release[];
}
export const SourcesParse = async (params: SourcesParseRequest) => {
  const response = await runicClient.get(`/sources/${params.id}/parse?categories=${params.categories}`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as SourcesParseResponse;
};
