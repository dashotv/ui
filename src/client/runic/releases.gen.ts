// Code generated by github.com/dashotv/golem. DO NOT EDIT.
import { Release, Response, Setting, runicClient } from '.';

export interface ReleasesIndexRequest {
  page: number;
  limit: number;
}
export interface ReleasesIndexResponse extends Response {
  result: Release[];
  total: number;
}
export const ReleasesIndex = async (params: ReleasesIndexRequest) => {
  const response = await runicClient.get(`/releases/?page=${params.page}&limit=${params.limit}`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as ReleasesIndexResponse;
};

export interface ReleasesCreateRequest {
  subject: Release;
}
export interface ReleasesCreateResponse extends Response {
  result: Release;
}
export const ReleasesCreate = async (params: ReleasesCreateRequest) => {
  const response = await runicClient.post(`/releases/?`, params.subject);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as ReleasesCreateResponse;
};

export interface ReleasesShowRequest {
  id: string;
}
export interface ReleasesShowResponse extends Response {
  result: Release;
}
export const ReleasesShow = async (params: ReleasesShowRequest) => {
  const response = await runicClient.get(`/releases/${params.id}?`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as ReleasesShowResponse;
};

export interface ReleasesUpdateRequest {
  id: string;
  subject: Release;
}
export interface ReleasesUpdateResponse extends Response {
  result: Release;
}
export const ReleasesUpdate = async (params: ReleasesUpdateRequest) => {
  const response = await runicClient.put(`/releases/${params.id}?`, params.subject);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as ReleasesUpdateResponse;
};

export interface ReleasesSettingsRequest {
  id: string;
  setting: Setting;
}
export interface ReleasesSettingsResponse extends Response {
  result: Release;
}
export const ReleasesSettings = async (params: ReleasesSettingsRequest) => {
  const response = await runicClient.patch(`/releases/${params.id}?`, params.setting);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as ReleasesSettingsResponse;
};

export interface ReleasesDeleteRequest {
  id: string;
}
export interface ReleasesDeleteResponse extends Response {
  result: Release;
}
export const ReleasesDelete = async (params: ReleasesDeleteRequest) => {
  const response = await runicClient.delete(`/releases/${params.id}?`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as ReleasesDeleteResponse;
};

export interface ReleasesSearchRequest {
  page: number;
  limit: number;
  source: string;
  kind: string;
  resolution: string;
  group: string;
  website: string;
}
export interface ReleasesSearchResponse extends Response {
  result: Release[];
}
export const ReleasesSearch = async (params: ReleasesSearchRequest) => {
  const response = await runicClient.get(
    `/releases/search?page=${params.page}&limit=${params.limit}&source=${params.source}&kind=${params.kind}&resolution=${params.resolution}&group=${params.group}&website=${params.website}`,
  );

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as ReleasesSearchResponse;
};
