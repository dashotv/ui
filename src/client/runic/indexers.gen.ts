// Code generated by github.com/dashotv/golem. DO NOT EDIT.
import { Indexer, Response, Setting, runicClient } from '.';

export interface IndexersIndexRequest {
  page: number;
  limit: number;
}
export interface IndexersIndexResponse extends Response {
  result: Indexer[];
  total: number;
}
export const IndexersIndex = async (params: IndexersIndexRequest) => {
  const response = await runicClient.get(`/indexers/?page=${params.page}&limit=${params.limit}`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as IndexersIndexResponse;
};

export interface IndexersCreateRequest {
  subject: Indexer;
}
export interface IndexersCreateResponse extends Response {
  result: Indexer;
}
export const IndexersCreate = async (params: IndexersCreateRequest) => {
  const response = await runicClient.post(`/indexers/?`, params.subject);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as IndexersCreateResponse;
};

export interface IndexersShowRequest {
  id: string;
}
export interface IndexersShowResponse extends Response {
  result: Indexer;
}
export const IndexersShow = async (params: IndexersShowRequest) => {
  const response = await runicClient.get(`/indexers/${params.id}?`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as IndexersShowResponse;
};

export interface IndexersUpdateRequest {
  id: string;
  subject: Indexer;
}
export interface IndexersUpdateResponse extends Response {
  result: Indexer;
}
export const IndexersUpdate = async (params: IndexersUpdateRequest) => {
  const response = await runicClient.put(`/indexers/${params.id}?`, params.subject);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as IndexersUpdateResponse;
};

export interface IndexersSettingsRequest {
  id: string;
  setting: Setting;
}
export interface IndexersSettingsResponse extends Response {
  result: Indexer;
}
export const IndexersSettings = async (params: IndexersSettingsRequest) => {
  const response = await runicClient.patch(`/indexers/${params.id}?`, params.setting);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as IndexersSettingsResponse;
};

export interface IndexersDeleteRequest {
  id: string;
}
export interface IndexersDeleteResponse extends Response {
  result: Indexer;
}
export const IndexersDelete = async (params: IndexersDeleteRequest) => {
  const response = await runicClient.delete(`/indexers/${params.id}?`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as IndexersDeleteResponse;
};
