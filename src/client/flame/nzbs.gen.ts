// Code generated by github.com/dashotv/golem. DO NOT EDIT.
import { Response, flameClient } from '.';
import * as nzbget from './nzbget';

export interface NzbsIndexResponse extends Response {
  result: nzbget.GroupResponse;
  total: number;
}
export const NzbsIndex = async () => {
  const response = await flameClient.get(`/nzbs/?`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as NzbsIndexResponse;
};

export interface NzbsAddRequest {
  url: string;
  category: string;
  name: string;
}
export interface NzbsAddResponse extends Response {
  result: number;
}
export const NzbsAdd = async (params: NzbsAddRequest) => {
  const response = await flameClient.get(`/nzbs/add?url=${params.url}&category=${params.category}&name=${params.name}`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as NzbsAddResponse;
};

export interface NzbsRemoveRequest {
  id: number;
}

export const NzbsRemove = async (params: NzbsRemoveRequest) => {
  const response = await flameClient.get(`/nzbs/remove?id=${params.id}`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as Response;
};

export interface NzbsDestroyRequest {
  id: number;
}

export const NzbsDestroy = async (params: NzbsDestroyRequest) => {
  const response = await flameClient.get(`/nzbs/destroy?id=${params.id}`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as Response;
};

export interface NzbsPauseRequest {
  id: number;
}

export const NzbsPause = async (params: NzbsPauseRequest) => {
  const response = await flameClient.get(`/nzbs/pause?id=${params.id}`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as Response;
};

export interface NzbsResumeRequest {
  id: number;
}

export const NzbsResume = async (params: NzbsResumeRequest) => {
  const response = await flameClient.get(`/nzbs/resume?id=${params.id}`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as Response;
};

export interface NzbsHistoryRequest {
  hidden: boolean;
}

export const NzbsHistory = async (params: NzbsHistoryRequest) => {
  const response = await flameClient.get(`/nzbs/history?hidden=${params.hidden}`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as Response;
};
