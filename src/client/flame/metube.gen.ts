// Code generated by github.com/dashotv/golem. DO NOT EDIT.
import { Response, flameClient } from '.';
import * as metube from './metube';

export interface MetubeIndexResponse extends Response {
  result: metube.HistoryResponse;
  total: number;
}
export const MetubeIndex = async () => {
  const response = await flameClient.get(`/metube/?`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as MetubeIndexResponse;
};

export interface MetubeAddRequest {
  url: string;
  name: string;
  auto_start: boolean;
}

export const MetubeAdd = async (params: MetubeAddRequest) => {
  const response = await flameClient.get(
    `/metube/add?url=${params.url}&name=${params.name}&auto_start=${params.auto_start}`,
  );

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as Response;
};

export interface MetubeRemoveRequest {
  name: string;
  where: string;
}

export const MetubeRemove = async (params: MetubeRemoveRequest) => {
  const response = await flameClient.get(`/metube/remove?name=${params.name}&where=${params.where}`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as Response;
};
