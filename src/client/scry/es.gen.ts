// Code generated by github.com/dashotv/golem. DO NOT EDIT.
import { Response, scryClient } from '.';
import * as elastic from './elastic';

export const EsIndex = async () => {
  const response = await scryClient.get(`/es/?`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as Response;
};

export interface EsMediaResponse extends Response {
  result: elastic.IndexResponse;
}
export const EsMedia = async () => {
  const response = await scryClient.get(`/es/media?`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as EsMediaResponse;
};

export interface EsReleaseResponse extends Response {
  result: elastic.IndexResponse;
}
export const EsRelease = async () => {
  const response = await scryClient.get(`/es/release?`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as EsReleaseResponse;
};

export interface EsDeleteRequest {
  index: string;
}

export const EsDelete = async (params: EsDeleteRequest) => {
  const response = await scryClient.delete(`/es/${params.index}?`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as Response;
};
